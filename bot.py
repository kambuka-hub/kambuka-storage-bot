import logging
from uuid import uuid4
from telegram import Update, ReplyKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    InlineQueryHandler,
)
import gspread
from google.oauth2.service_account import Credentials
import json
import os

# === –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
service_key = os.environ.get("SERVICE_KEY")
if service_key:
    with open("service_account.json", "w") as f:
        json.dump(json.loads(service_key), f)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.environ.get("7825570683:AAGqJkCCKZVNmSt2kbgJj5M6Oh8nkvOHgvE")
SHEET_URL = os.environ.get("https://docs.google.com/spreadsheets/d/1PZNpn9zYbUrGSvTT8AcsUJkUhOPKmw9EZxi2kh9x7Kg/edit?usp=drive_link")

# === GOOGLE SHEETS ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_file("service_account.json", scopes=scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(SHEET_URL).sheet1

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
def get_data():
    return sheet.get_all_records()

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä", "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë"], ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å–∫–ª–∞–¥–∞ KAMBUKA. –ù–∞–π–¥—É, –≥–¥–µ –ª–µ–∂–∏—Ç –ª—é–±–æ–π —Ç–æ–≤–∞—Ä üì¶", reply_markup=reply_markup)

# === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.lower()
    data = get_data()
    results = []

    if "–ø–æ–º–æ—â—å" in query:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∏ —è —Å–∫–∞–∂—É, –≥–¥–µ –æ–Ω –ª–µ–∂–∏—Ç.")
        return

    if "–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë" in query:
        lines = [f"üì¶ {r['–ß—Ç–æ']} ‚Äî üóÇ {r['–ú–µ—Å—Ç–æ']}" for r in data[:20]]
        await update.message.reply_text("\n".join(lines))
        return

    for row in data:
        if query in row['–ß—Ç–æ'].lower() or query in row['–û–ø–∏—Å–∞–Ω–∏–µ'].lower():
            results.append(f"üì¶ {row['–ß—Ç–æ']}\nüóÇ {row['–ú–µ—Å—Ç–æ']}\nüìÑ {row['–û–ø–∏—Å–∞–Ω–∏–µ']}")

    if results:
        await update.message.reply_text("üîç –ù–∞–π–¥–µ–Ω–æ:\n" + "\n\n".join(results))
    else:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# === INLINE ===
async def inlinequery(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.inline_query.query.lower()
    data = get_data()
    results = []

    for row in data:
        if query in row['–ß—Ç–æ'].lower():
            results.append(
                InlineQueryResultArticle(
                    id=str(uuid4()),
                    title=f"{row['–ß—Ç–æ']}",
                    description=f"{row['–ú–µ—Å—Ç–æ']} ‚Äî {row['–û–ø–∏—Å–∞–Ω–∏–µ']}",
                    input_message_content=InputTextMessageContent(
                        message_text=f"üì¶ {row['–ß—Ç–æ']}\nüóÇ {row['–ú–µ—Å—Ç–æ']}\nüìÑ {row['–û–ø–∏—Å–∞–Ω–∏–µ']}"
                    )
                )
            )

    await update.inline_query.answer(results[:10], cache_time=0)

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(InlineQueryHandler(inlinequery))
    app.run_polling()
