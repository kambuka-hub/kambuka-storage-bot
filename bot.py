import os
import logging
import gspread
import threading
from flask import Flask
from google.oauth2.service_account import Credentials
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.environ.get("BOT_TOKEN")
SHEET_URL = os.environ.get("SHEET_URL")

# === GOOGLE SHEETS ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_file("/etc/secrets/service_account.json", scopes=scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(SHEET_URL).sheet1

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –≠–¢–ê–ü–´ –î–ò–ê–õ–û–ì–ê ===
WHAT, PLACE, NOTE, CONFIRM_ADD = range(4)

# === –°–¢–ê–†–¢ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ‚Äî –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–≥–æ –Ω–∞–π—Ç–∏.")

# === –ü–û–ò–°–ö ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    rows = sheet.get_all_records()
    results = []

    for row in rows:
        row = {k.strip(): str(v).strip() for k, v in row.items()}
        if any(text.lower() in str(value).lower() for value in row.values()):
            results.append(f"üì¶ {row.get('–ß—Ç–æ', '‚Äî')}\nüìç {row.get('–ú–µ—Å—Ç–æ', '‚Äî')}\nüìú {row.get('–û–ø–∏—Å–∞–Ω–∏–µ', '‚Äî')}")

    if results:
        await update.message.reply_text("\n\n".join(results))
    else:
        context.user_data['what'] = text
        keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(f"‚ùå –¢–æ–≤–∞—Ä /{text}/ –Ω–µ –Ω–∞–π–¥–µ–Ω. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–∫–ª–∞–¥?", reply_markup=keyboard)
        return CONFIRM_ADD

# === –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø ===
async def confirm_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text.strip().lower()
    if answer == "–¥–∞":
        keyboard = ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True)
        await update.message.reply_text("–ù–∞ –∫–∞–∫–æ–π –ø–æ–ª–∫–µ –æ–Ω –ª–µ–∂–∏—Ç? üìç", reply_markup=keyboard)
        return PLACE
    else:
        await update.message.reply_text("–•–æ—Ä–æ—à–æ. –ï—Å–ª–∏ —á—Ç–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê ===
async def add_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['place'] = update.message.text.strip()
    keyboard = ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True)
    await update.message.reply_text("–î–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üìú", reply_markup=keyboard)
    return NOTE

async def add_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    what = context.user_data.get('what', '')
    place = context.user_data.get('place', '')
    note = update.message.text.strip()
    try:
        sheet.append_row([place, what, note])  # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: –ú–µ—Å—Ç–æ, –ß—Ç–æ, –û–ø–∏—Å–∞–Ω–∏–µ
        await update.message.reply_text("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# === FAKE WEB SERVER FOR RENDER ===
flask_app = Flask(__name__)

@flask_app.route('/')
def index():
    return 'Kambuka bot is alive!'

def run_flask():
    port = int(os.environ.get("PORT", 10000))
    flask_app.run(host='0.0.0.0', port=port)

# === –ó–ê–ü–£–°–ö –í–°–ï–ì–û ===
def main():
    threading.Thread(target=run_flask).start()

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
        states={
            CONFIRM_ADD: [
                MessageHandler(filters.Regex("^(–î–∞|–ù–µ—Ç)$"), confirm_add),
                CommandHandler("cancel", cancel)
            ],
            PLACE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_place),
                CommandHandler("cancel", cancel)
            ],
            NOTE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_note),
                CommandHandler("cancel", cancel)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == "__main__":
    main()
