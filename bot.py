from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import gspread
from google.oauth2.service_account import Credentials
import os
import logging

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.environ.get("BOT_TOKEN")
SHEET_URL = os.environ.get("SHEET_URL")

# === GOOGLE SHEETS ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_file("/etc/secrets/service_account.json", scopes=scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(SHEET_URL).sheet1

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ö–û–ú–ê–ù–î–´ ===
MENU_KEYBOARD = ReplyKeyboardMarkup([
    ["üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä"],
    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"]
], resize_keyboard=True)

user_states = {}  # user_id -> "adding" or None
temp_data = {}     # user_id -> dict

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kambuka Storage Bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MENU_KEYBOARD
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    if text == "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        user_states[user_id] = "search"

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä":
        temp_data[user_id] = {}
        user_states[user_id] = "adding_1"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ú–µ—Å—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, A1_001):")

    elif user_states.get(user_id) == "search":
        data = sheet.get_all_records()
        results = []
        for row in data:
            row = {k.strip(): v for k, v in row.items()}
            if text.lower() in row.get("–ß—Ç–æ", "").lower():
                results.append(f"üì¶ {row.get('–ß—Ç–æ')}\nüìç {row.get('–ú–µ—Å—Ç–æ')}\nüìù {row.get('–û–ø–∏—Å–∞–Ω–∏–µ')}")
        if results:
            await update.message.reply_text("\n\n".join(results))
        else:
            await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        user_states[user_id] = None

    elif user_states.get(user_id) == "adding_1":
        temp_data[user_id]["–ú–µ—Å—Ç–æ"] = text
        user_states[user_id] = "adding_2"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ß—Ç–æ (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞):")

    elif user_states.get(user_id) == "adding_2":
        temp_data[user_id]["–ß—Ç–æ"] = text
        user_states[user_id] = "adding_3"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –û–ø–∏—Å–∞–Ω–∏–µ:")

    elif user_states.get(user_id) == "adding_3":
        temp_data[user_id]["–û–ø–∏—Å–∞–Ω–∏–µ"] = text
        sheet.append_row([
            temp_data[user_id].get("–ú–µ—Å—Ç–æ"),
            temp_data[user_id].get("–ß—Ç–æ"),
            temp_data[user_id].get("–û–ø–∏—Å–∞–Ω–∏–µ"),
            ""
        ])
        await update.message.reply_text("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=MENU_KEYBOARD)
        user_states[user_id] = None
        temp_data.pop(user_id, None)

    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=MENU_KEYBOARD)

# === –ó–ê–ü–£–°–ö ===
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

if __name__ == "__main__":
    app.run_polling()
